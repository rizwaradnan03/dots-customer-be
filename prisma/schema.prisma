generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Province {
  id        String   @id @default(uuid())
  name      String
  cities    City[]
  offices   Office[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id           String        @id @default(uuid())
  name         String
  province     Province      @relation(fields: [provinceId], references: [id])
  provinceId   String
  subdistricts Subdistrict[]
  offices      Office[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Subdistrict {
  id        String   @id @default(uuid())
  name      String
  city      City     @relation(fields: [cityId], references: [id])
  cityId    String
  wards     Ward[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ward {
  id            String      @id @default(uuid())
  name          String
  subdistrict   Subdistrict @relation(fields: [subdistrictId], references: [id])
  subdistrictId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Office {
  id           String        @id @default(uuid())
  name         String        @unique
  email        String        @unique
  phone        String
  address      String
  province     Province      @relation(fields: [provinceId], references: [id])
  provinceId   String
  city         City          @relation(fields: [cityId], references: [id])
  cityId       String
  reservations Reservation[]
  savings      Savings[]
  deposits     Deposit[]
  credits      Credit[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  id                  String   @id @default(uuid())
  reason              String
  date                DateTime
  time                String
  qrcodedata          String
  officeDestination   Office   @relation(fields: [officeDestinationId], references: [id])
  officeDestinationId String
  isactive            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?
}

model Service {
  id          String        @id @default(uuid())
  purpose     String
  reservation Reservation[]
}

model Savings {
  id        String   @id @default(uuid())
  account   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  office    Office   @relation(fields: [officeId], references: [id])
  officeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deposit {
  id        String   @id @default(uuid())
  account   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  office    Office   @relation(fields: [officeId], references: [id])
  officeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credit {
  id        String   @id @default(uuid())
  account   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  office    Office   @relation(fields: [officeId], references: [id])
  officeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  nik                  String
  placeOfBirth         String
  dateOfBirth          DateTime
  biologicalMotherName String
  email                String    @unique
  referralCode         String
  username             String    @unique
  password             String
  histories            History[]
  savings              Savings[]
  deposits             Deposit[]
  credits              Credit[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model History {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
