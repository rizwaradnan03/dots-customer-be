generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reservation {
  id                 String    @id @default(uuid()) @map(name: "id")
  branchId           String?   @map(name: "branch_id")
  destinationService Int?      @map(name: "destinationService")
  reason             String?   @map(name: "reason")
  attendAtStart      DateTime? @map(name: "attendAtStart")
  attendAtEnd        DateTime? @map(name: "attendAtEnd")
  createdAt          DateTime? @default(now()) @map(name: "createdAt") @db.Timestamp()
  deletedAt          DateTime? @map(name: "deletedAt") @db.Timestamp()
  isActive           Boolean?  @default(false) @map(name: "isActive")
}

model savings {
  id               String    @id @default(uuid())
  externalId       String?   @map(name: "externalId")
  currentBalance   Int?      @map(name: "currentBalance")
  availableBalance Int?      @map(name: "availableBalance")
  status           Int?      @map(name: "status")
  productType      String?   @map(name: "productType")
  lastSycnedAt     DateTime  @map(name: "last_synced_at") @db.Timestamp()
  createdAt        DateTime? @default(now()) @map(name: "created_at")
  updatedAt        DateTime? @updatedAt @map(name: "updated_at")
  deletedAt        DateTime? @map(name: "deleted_at") @db.Timestamp()

  updatedBy   users?     @relation("savingUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  createdBy   users?     @relation("savingCreatedBy", fields: [createdById], references: [id])
  createdById String?
  customer    customers? @relation("savingId", fields: [customerId], references: [id])
  customerId  String?
}

model tenants {
  id                   Int     @id @default(autoincrement())
  public_id            String?
  name                 String?
  database_schema_name String?
  core_type            String?
  core_database_type   String?
  core_database_dsn    String?
  logo_url_base64      String?
}

model users {
  id               String    @id @default(uuid()) @map(name: "id")
  isActive         Boolean?  @map(name: "is_active")
  email            String?   @map(name: "email")
  emailConfirmedAt DateTime? @map(name: "email_confirmed_at") @db.Timestamp()
  username         String?   @map(name: "username")
  password         String?   @map(name: "password")
  lastName         String?   @map(name: "last_name")
  firstName        String?   @map(name: "first_name")
  createdAt        DateTime? @default(now()) @map(name: "created_at")
  deleteAt         DateTime? @updatedAt @map(name: "delete_at")
  accountOfficerId String?   @default("CORPORATE") @map(name: "account_officer_id")
  clientType       String?   @map(name: "client_type")
  tenantId         Int?      @map(name: "tenant_id")
  branchId         String?   @map(name: "branch_id")

  savingsUpdated savings[] @relation("savingUpdatedBy")
  savingsCreated savings[] @relation("savingCreatedBy")

  customerCreated customers[] @relation("customerCreatedBy")
  customerUpdated customers[] @relation("customerUpdatedBy")
  customerDeleted customers[] @relation("customerDeletedBy")

  customer   customers? @relation("userId", fields: [customerId], references: [id])
  customerId String?
}

model customers {
  id               String    @id @default(uuid()) @map(name: "id")
  externalId       String?   @map(name: "external_id")
  fullName         String?   @map(name: "full_name")
  identityNumber   String?   @map(name: "identity_number")
  identityType     String?   @map(name: "identity_type")
  email            String?   @map(name: "email")
  phoneNumber      String?   @map(name: "phone_number")
  mobileNumber     String?   @map(name: "mobile_number")
  gender           String?   @map(name: "gender")
  address          String?   @map(name: "address")
  subdistrict      String?   @map(name: "subdistrict")
  district         String?   @map(name: "district")
  motherMaidenName String?   @map(name: "mother_maiden_name")
  referralCode     String?   @map(name: "referral_code")
  dati2Code        String?   @map(name: "dati2_code")
  identityPhotoUrl String?   @map(name: "identity_photo_url")
  selfiePhotoUrl   String?   @map(name: "selfie_photo_url")
  birthPlace       String?   @map(name: "birth_place")
  birthDate        DateTime? @map(name: "birth_date") @db.Date
  status           Int?      @map(name: "status")
  lastSyncedAt     DateTime? @map(name: "last_synced_at") @db.Timestamp()

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at") @db.Timestamp()

  user   users[]   @relation("userId")
  saving savings[] @relation("savingId")

  createdBy   users?  @relation("customerCreatedBy", fields: [createdById], references: [id])
  createdById String?
  updatedBy   users?  @relation("customerUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  deletedBy   users?  @relation("customerDeletedBy", fields: [deletedById], references: [id])
  deletedById String?
}

model images {
  id           Int      @id @default(autoincrement())
  filename     String?
  isOnCarousel Boolean?
}
