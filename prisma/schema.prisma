generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reservation {
  id                  String    @id @default(uuid())
  branch_id           String?
  destination_service Int?
  reason              String?
  attend_at_start     DateTime?
  attend_at_end       DateTime?
  created_at          DateTime? @db.Timestamp()
  created_by          Int?
  deleted_at          DateTime? @db.Timestamp()
  is_active           Boolean?  @default(false)

  tenants   tenants? @relation(fields: [tenant_id], references: [id])
  tenant_id Int?
}

model Savings {
  id                String     @id @default(uuid())
  customers         customers? @relation(fields: [customer_id], references: [id])
  customer_id       String?
  external_id       String?
  current_balance   Int?
  available_balance Int?
  status            Int?
  product_type      String?
  last_synced_at    DateTime   @db.Timestamp()
  created_by        Int?
  updated_by        Int?
  craated_at        DateTime?  @default(now())
  updated_at        DateTime?  @updatedAt
  deleted_at        DateTime?  @db.Timestamp()
}

model tenants {
  id                   Int     @id @default(autoincrement())
  public_id            String?
  name                 String?
  database_schema_name String?
  core_type            String?
  core_database_type   String?
  core_database_dsn    String?
  logo_url_base64      String?

  reservation Reservation[]
  users       users[]
}

model users {
  id               String    @id @default(uuid()) @map(name: "id")
  isActive         Boolean?  @map(name: "is_active")
  email            String?   @map(name: "email")
  emailConfirmedAt DateTime? @map(name: "email_confirmed_at") @db.Timestamp()
  username         String?   @map(name: "username")
  password         String?   @map(name: "password")
  lastName         String?   @map(name: "last_name")
  firstName        String?   @map(name: "first_name")
  createdAt        DateTime? @default(now()) @map(name: "created_at")
  deleteAt         DateTime? @updatedAt @map(name: "delete_at")
  accountOfficerId String?   @default("CORPORATE") @map(name: "account_officer_id")
  clientType       String?   @map(name: "client_type")
  customerId       String?   @map(name: "customer_id")
  tenantId         Int?      @map(name: "tenant_id")
  branchId         String?   @map(name: "branch_id")

  tenants     tenants?   @relation(fields: [tenantsId], references: [id])
  tenantsId   Int?
  customers   customers? @relation(fields: [customersId], references: [id])
  customersId String?
}

model customers {
  id               String    @id @default(uuid()) @map(name: "id")
  externalId       String?   @map(name: "external_id")
  fullName         String?   @map(name: "full_name")
  identityNumber   String?   @map(name: "identity_number")
  identityType     String?   @map(name: "identity_type")
  email            String?   @map(name: "email")
  phoneNumber      String?   @map(name: "phone_number")
  mobileNumber     String?   @map(name: "mobile_number")
  gender           String?   @map(name: "gender")
  address          String?   @map(name: "address")
  subdistrict      String?   @map(name: "subdistrict")
  district         String?   @map(name: "district")
  motherMaidenName String?   @map(name: "mother_maiden_name")
  referralCode     String?   @map(name: "referral_code")
  dati2Code        String?   @map(name: "dati2_code")
  identityPhotoUrl String?   @map(name: "identity_photo_url")
  selfiePhotoUrl   String?   @map(name: "selfie_photo_url")
  birthPlace       String?   @map(name: "birth_place")
  birthDate        DateTime? @map(name: "birth_date") @db.Date
  status           Int?      @map(name: "status")
  lastSyncedAt     DateTime? @map(name: "last_synced_at") @db.Timestamp()

  createdBy Int? @map(name: "created_by")
  updatedBy Int? @map(name: "updated_by")
  deletedBy Int? @map(name: "deleted_by")

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at") @db.Timestamp()
  users     users[]
  savings   Savings[]
}

model images {
  id           Int      @id @default(autoincrement())
  filename     String?
  isOnCarousel Boolean?
}
